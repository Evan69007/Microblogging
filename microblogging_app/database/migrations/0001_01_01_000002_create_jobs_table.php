<?php

use Illuminate\Database\Migrations\Migration;     // Classe de base pour les migrations Laravel
use Illuminate\Database\Schema\Blueprint;         // Permet de d√©finir les colonnes de la table
use Illuminate\Support\Facades\Schema;            // Fournit les fonctions pour manipuler la base

// Migration anonyme (standard depuis Laravel 8)
return new class extends Migration
{
    /**
     * M√©thode ex√©cut√©e quand on lance `php artisan migrate`
     * Elle cr√©e 3 tables li√©es au syst√®me de file d‚Äôattente Laravel : jobs, job_batches, failed_jobs
     */
    public function up(): void
    {
        // ‚úÖ Table "jobs" : stocke les jobs en attente d‚Äôex√©cution
        Schema::create('jobs', function (Blueprint $table) {
            $table->id();                                  // Cl√© primaire
            $table->string('queue')->index();              // Nom de la file (ex: "emails", "default")
            $table->longText('payload');                   // Contenu du job s√©rialis√© (objet + donn√©es)
            $table->unsignedTinyInteger('attempts');       // Nombre de tentatives d√©j√† effectu√©es
            $table->unsignedInteger('reserved_at')->nullable();  // Timestamp de r√©servation (job en cours)
            $table->unsignedInteger('available_at');       // Timestamp √† partir duquel le job peut √™tre ex√©cut√©
            $table->unsignedInteger('created_at');         // Timestamp de cr√©ation du job
        });

        // ‚úÖ Table "job_batches" : g√®re les lots de jobs (pour les batchs Laravel)
        Schema::create('job_batches', function (Blueprint $table) {
            $table->string('id')->primary();               // ID unique du lot (UUID)
            $table->string('name');                        // Nom du batch (utile pour le suivi)
            $table->integer('total_jobs');                 // Nombre total de jobs dans le batch
            $table->integer('pending_jobs');               // Nombre de jobs restants
            $table->integer('failed_jobs');                // Nombre de jobs √©chou√©s
            $table->longText('failed_job_ids');            // Liste des IDs de jobs √©chou√©s
            $table->mediumText('options')->nullable();     // Options suppl√©mentaires du batch (JSON)
            $table->integer('cancelled_at')->nullable();   // Timestamp d‚Äôannulation (si annul√©)
            $table->integer('created_at');                 // Timestamp de cr√©ation
            $table->integer('finished_at')->nullable();    // Timestamp de fin d'ex√©cution du batch
        });

        // ‚úÖ Table "failed_jobs" : stocke les jobs √©chou√©s
        Schema::create('failed_jobs', function (Blueprint $table) {
            $table->id();                                  // Cl√© primaire
            $table->string('uuid')->unique();              // UUID unique pour suivre chaque job
            $table->text('connection');                    // Nom de la connexion utilis√©e (ex: "database", "redis")
            $table->text('queue');                         // File d‚Äôorigine du job
            $table->longText('payload');                   // Contenu du job
            $table->longText('exception');                 // Message d‚Äôerreur / stacktrace
            $table->timestamp('failed_at')->useCurrent();  // Date de l‚Äô√©chec
        });
    }

    /**
     * M√©thode rollback (appel√©e avec `php artisan migrate:rollback`)
     * Supprime les 3 tables cr√©√©es
     */
    public function down(): void
    {
        Schema::dropIfExists('jobs');
        Schema::dropIfExists('job_batches');
        Schema::dropIfExists('failed_jobs');
    }
};

/* Ce fichier cr√©e les tables n√©cessaires au fonctionnement du syst√®me de file d‚Äôattente de Laravel, utile pour traiter des t√¢ches en arri√®re-plan (asynchrone) :
Table	R√¥le
jobs	Liste des jobs en attente ou en cours d‚Äôex√©cution
job_batches	G√®re les lots de jobs lanc√©s ensemble (batchs Laravel)
failed_jobs	Historique des jobs qui ont √©chou√© (utile pour debug ou relancer)

üõ†Ô∏è Quand tu utilises √ßa ?
    Envoi d‚Äôemails en arri√®re-plan
    Traitement d‚Äôimages
    Enregistrement de logs lourds
    Notifications diff√©r√©es, synchronisation, etc. */