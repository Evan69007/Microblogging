<?php

use Illuminate\Database\Migrations\Migration;     // Classe de base pour toutes les migrations Laravel
use Illuminate\Database\Schema\Blueprint;         // Permet de d√©finir les colonnes de la table
use Illuminate\Support\Facades\Schema;            // Fournit les fonctions pour manipuler la BDD

// Migration anonyme (standard Laravel 8+)
return new class extends Migration
{
    /**
     * La m√©thode `up()` est appel√©e lors de l'ex√©cution de `php artisan migrate`.
     * Elle permet ici de cr√©er deux tables utilis√©es pour le syst√®me de cache de Laravel.
     */
    public function up(): void
    {
        // ‚úÖ Table "cache" : stocke les donn√©es mises en cache par Laravel
        Schema::create('cache', function (Blueprint $table) {
            $table->string('key')->primary();       // Cl√© unique pour identifier chaque √©l√©ment du cache
            $table->mediumText('value');            // Contenu stock√© en cache (s√©rialis√©)
            $table->integer('expiration');          // Timestamp d‚Äôexpiration du cache
        });

        // ‚úÖ Table "cache_locks" : utilis√©e pour verrouiller une ressource pendant le caching
        Schema::create('cache_locks', function (Blueprint $table) {
            $table->string('key')->primary();       // Cl√© unique du verrou
            $table->string('owner');                // Identifiant de l‚Äôinstance qui poss√®de le verrou
            $table->integer('expiration');          // Timestamp √† partir duquel le verrou expire
        });
    }

    /**
     * La m√©thode `down()` est appel√©e lors d‚Äôun rollback (`php artisan migrate:rollback`)
     * Elle supprime les deux tables.
     */
    public function down(): void
    {
        Schema::dropIfExists('cache');
        Schema::dropIfExists('cache_locks');
    }
};

/* Laravel utilise ces deux tables uniquement si tu configures un syst√®me de cache bas√© sur la base de donn√©es (DB driver dans config/cache.php).

Table	Utilit√© principale
cache	Stocke les paires cl√©/valeur pour le cache Laravel
cache_locks	G√®re les verrous pour emp√™cher l‚Äôacc√®s concurrent

üìå Quand sont-elles utilis√©es ?
    Lorsque tu utilises Cache::put(), Cache::remember() avec driver 'database'
    Lorsque Laravel a besoin de verrouiller une ressource partag√©e (ex. : file d‚Äôattente ou cache concurrent) */