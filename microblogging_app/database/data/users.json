[
    {
        "name": "Alice Durand",
        "email": "alice.durand@pushmycode.dev",
        "password": "test123",
        "biographie": "Développeuse front-end passionnée par les interfaces intuitives.\nExperte en Vue.js et Tailwind CSS.\nJe m'intéresse beaucoup à l'accessibilité web.\nJe partage des astuces front sur mon profil.",
        "posts": [
            {
                "titre": "Améliorer l'accessibilité avec ARIA",
                "description": "Les rôles ARIA permettent d'enrichir les balises HTML sémantiquement.\nIls sont utiles pour améliorer la navigation avec des lecteurs d'écran.",
                "hashtags": ["#accessibilite", "#webdev"]
            },
            {
                "titre": "Grid vs Flexbox",
                "description": "Flexbox est adapté aux alignements en ligne ou colonne, tandis que Grid gère des structures plus complexes.\nChaque outil a sa logique et ses cas d'usage.",
                "hashtags": ["#css", "#responsive"]
            },
            {
                "titre": "Structurer une app Vue 3",
                "description": "Utiliser des composants bien nommés, découper le code proprement et organiser les props aide à maintenir une base stable.\nLes hooks composables permettent aussi de séparer la logique.",
                "hashtags": ["#vuejs", "#cleanCode"]
            }
        ]
    },
    {
        "name": "Mehdi Lemoine",
        "email": "mehdi.lemoine@pushmycode.dev",
        "password": "test123",
        "biographie": "Développeur full stack JavaScript spécialisé Node.js.\nPassionné par les API REST et la performance serveur.\nToujours partant pour des hacks techniques.\nTeam dark mode à fond.",
        "posts": [
            {
                "titre": "API REST : les bonnes pratiques",
                "description": "Développeur full stack JavaScript spécialisé Node.js.\nPassionné par les API REST et la performance serveur.\nToujours partant pour des hacks techniques.\nTeam dark mode à fond.",
                "hashtags": ["#api", "#rest"]
            },
            {
                "titre": "Utiliser MongoDB avec Mongoose",
                "description": "Les codes HTTP doivent être utilisés clairement : 200 pour OK, 201 pour création, 422 pour erreur de validation.\nLes routes doivent être prévisibles et logiques.",
                "hashtags": ["#mongodb", "#nodejs"]
            },
            {
                "titre": "Async/Await expliqué simplement",
                "description": "Mongoose permet de définir des schémas pour structurer les documents MongoDB.\nIl facilite aussi la validation et les relations entre collections.",
                "hashtags": ["#javascript", "#async"]
            }
        ]
    },
    {
        "name": "Clara Benchetrit",
        "email": "clara.benchetrit@pushmycode.dev",
        "password": "test123",
        "biographie": "Développeuse junior en reconversion.\nFan de Laravel et de PHP structuré.\nJ’aime apprendre chaque jour sur le back et le front.\nJe documente mon apprentissage sur PushMyCode.",
        "posts": [
            {
                "titre": "Comprendre les migrations Laravel",
                "description": "Les migrations permettent de versionner les schémas de base de données.\nChaque fichier crée ou modifie des tables de façon contrôlée.",
                "hashtags": ["#laravel", "#bdd"]
            },
            {
                "titre": "Mes ressources Laravel préférées",
                "description": "La documentation officielle est claire.\nLaracasts et Laravel News complètent avec des cas pratiques et de l’actualité.",
                "hashtags": ["#laravel", "#ressources"]
            },
            {
                "titre": "Blade vs Vue : qui fait quoi ?",
                "description": "Blade permet le rendu côté serveur, Vue gère l’interactivité côté client.\nLes deux peuvent cohabiter dans une application Laravel.",
                "hashtags": ["#laravel", "#vuejs"]
            }
        ]
    },
    {
        "name": "Thomas Ribeiro",
        "email": "thomas.ribeiro@pushmycode.dev",
        "password": "test123",
        "biographie": "Ingénieur logiciel dans une startup.\nJ’adore automatiser et optimiser les workflows.\nJ’utilise beaucoup Git, CI/CD et GitHub Actions.\nToujours prêt à partager des astuces productivité.",
        "posts": [
            {
                "titre": "Optimiser un workflow Git",
                "description": "Ingénieur logiciel dans une startup.\nJ’adore automatiser et optimiser les workflows.\nJ’utilise beaucoup Git, CI/CD et GitHub Actions.\nToujours prêt à partager des astuces productivité.",
                "hashtags": ["#git", "#workflow"]
            },
            {
                "titre": "CI/CD simplifié avec GitHub Actions",
                "description": "GitHub Actions permet d’automatiser les tests, le linting ou le déploiement.\nChaque action est déclenchée par un événement Git.",
                "hashtags": ["#github", "#devops"]
            },
            {
                "titre": "Secrets .env : bien les gérer",
                "description": "Les variables d’environnement ne doivent jamais être versionnées.\nIl est recommandé d’utiliser `.env` et `.env.example` pour le partage.",
                "hashtags": ["#security", "#dotenv"]
            }
        ]
    },
    {
        "name": "Sofia Belkacem",
        "email": "sofia.belkacem@pushmycode.dev",
        "password": "test123",
        "biographie": "Développeuse front React/Vue avec une formation en ingénierie.\nJe m’intéresse à la qualité du code, aux tests et à l'open source.\nJ’aime faire des revues de code entre potes pour progresser.\nFan de composantisation bien pensée.",
        "posts": [
            {
                "titre": "Tester ses composants Vue",
                "description": "Vitest permet de tester les composants Vue avec une syntaxe simple et moderne.\nIl est compatible avec les outils Vite et Vue 3.",
                "hashtags": ["#vuejs", "#tests"]
            },
            {
                "titre": "Créer des composants réutilisables",
                "description": "Un composant réutilisable est isolé, configurable par des props, et sans dépendances inutiles.\nCela évite les répétitions et facilite la maintenance.",
                "hashtags": ["#components", "#cleanCode"]
            },
            {
                "titre": "Participer à un projet open source",
                "description": "Contribuer commence par lire la documentation et choisir un projet qui nous parle.\nCorriger une faute de typo ou un README est déjà un bon début.",
                "hashtags": ["#opensource", "#devtips"]
            }
        ]
    }
]
